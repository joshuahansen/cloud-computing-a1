Joshua Hansen s3589185

Task 1


class Greeting(ndb.Model):
    """A main model for representing an individual Guestbook entry."""
    author = ndb.StructuredProperty(Author)
    subject = ndb.StringProperty(indexed=False)
    content = ndb.StringProperty(indexed=False)
    date = ndb.DateTimeProperty(auto_now_add=True)
# [END greeting]

# [START guestbook]
class Guestbook(webapp2.RequestHandler):

    def post(self):
        # We set the same parent key on the 'Greeting' to ensure each
        # Greeting is in the same entity group. Queries across the
        # single entity group will be consistent. However, the write
        # rate to a single entity group should be limited to
        # ~1/second.
        guestbook_name = self.request.get('guestbook_name',
                                          DEFAULT_GUESTBOOK_NAME)
        greeting = Greeting(parent=guestbook_key(guestbook_name))

        if users.get_current_user():
            greeting.author = Author(
                identity=users.get_current_user().user_id(),
                email=users.get_current_user().email())

        greeting.content = self.request.get('content')
        greeting.subject = self.request.get('subject')
        greeting.put()

        query_params = {'guestbook_name': guestbook_name}
        self.redirect('/?' + urllib.urlencode(query_params))
# [END guestbook]


Index.html file changes. 

<!-- [START greetings] -->
{% for greeting in greetings %}
<div class="row">
{% if greeting.author %}
  <b>{{ greeting.author.email }}
    {% if user and user.user_id() == greeting.author.identity %}
      (You)
    {% endif %}
  </b> wrote:
{% else %}
  An anonymous person wrote:
{% endif %}
<blockquote></blockquote>
<blockquote>Subject: {{ greeting.subject }}</br>{{ greeting.content }}</blockquote>
</div>
{% endfor %}
<!-- [END greetings] -->

<form action="/sign?guestbook_name={{ guestbook_name }}" method="post">
<div><label>Subject:</label><input type='text' name='subject'></div>
<div><textarea name="content" class="input-block-level" rows="3"></textarea></div>
<div><input type="submit" class="btn btn-large btn-primary" value="Sign Guestbook"></div>
</form>


TASK 3

1. Find a list of all female babies born after 2008 with frequency count between 7000 and 17000. 

SELECT name, year, SUM(count) as freq FROM [baby.baby_names] WHERE year > 2008 AND gender='F' AND count between 7000 AND 17000 GROUP BY name, year ORDER BY freq DESC;

2. Find total number of male babies born before 2011 with name starts with ‘T’. 

SELECT SUM(count) as total FROM [baby.baby_names] WHERE name LIKE 'T%' AND gender='M' AND year < 2011;

3. Find top 20 baby names based on frequency after year 2006.

SELECT name, SUM(count) as freq FROM [baby.baby_names] WHERE year > 2006 GROUP BY name ORDER BY freq DESC LIMIT 20;
